/* eslint-disable */
//prettier-ignore
module.exports = {
name: "@yarnpkg/plugin-npm-audit-fix",
factory: function (require) {
var plugin=(()=>{var A=Object.create;var l=Object.defineProperty;var D=Object.getOwnPropertyDescriptor;var S=Object.getOwnPropertyNames;var b=Object.getPrototypeOf,x=Object.prototype.hasOwnProperty;var f=(i=>typeof require<"u"?require:typeof Proxy<"u"?new Proxy(i,{get:(t,s)=>(typeof require<"u"?require:t)[s]}):i)(function(i){if(typeof require<"u")return require.apply(this,arguments);throw new Error('Dynamic require of "'+i+'" is not supported')});var N=(i,t)=>{for(var s in t)l(i,s,{get:t[s],enumerable:!0})},y=(i,t,s,r)=>{if(t&&typeof t=="object"||typeof t=="function")for(let o of S(t))!x.call(i,o)&&o!==s&&l(i,o,{get:()=>t[o],enumerable:!(r=D(t,o))||r.enumerable});return i};var k=(i,t,s)=>(s=i!=null?A(b(i)):{},y(t||!i||!i.__esModule?l(s,"default",{value:i,enumerable:!0}):s,i)),I=i=>y(l({},"__esModule",{value:!0}),i);var j={};N(j,{default:()=>_});var R=f("stream"),v=f("@yarnpkg/cli"),e=f("@yarnpkg/core"),c=k(f("typanion")),P=c.isObject({advisories:c.isDict(c.isObject({module_name:c.isString(),vulnerable_versions:c.isString(),patched_versions:c.isString()},{extra:c.isDict(c.isUnknown())}))},{extra:c.isDict(c.isUnknown())}),h=class extends v.BaseCommand{async execute(){let t=await this.initState(),{configuration:s,project:r,cache:o}=t;return(await e.StreamReport.start({configuration:s,stdout:this.context.stdout},async d=>{let g=await d.startTimerPromise("Audit step",()=>this.getAdvisories());for(let a of g){let p=e.structUtils.prettyIdent(s,e.structUtils.parseIdent(a.module_name)),w=e.structUtils.prettyRange(s,a.vulnerable_versions),u=e.structUtils.prettyRange(s,a.patched_versions);await d.startTimerPromise(`Advisory for ${p} at ${w}, patched at ${u}`,()=>this.handleAdvisory(d,t,a))}await r.install({report:d,cache:o,mode:e.InstallMode.UpdateLockfile})})).exitCode()}async handleAdvisory(t,s,r){let{configuration:o,resolver:n,project:d}=s,g=e.structUtils.parseIdent(r.module_name);for(let a of d.storedDescriptors.values()){if(!e.structUtils.areIdentsEqual(a,g)||e.structUtils.isVirtualDescriptor(a))continue;let p=d.storedPackages.get(d.storedResolutions.get(a.descriptorHash));if(!p||!e.semverUtils.satisfiesWithPrereleases(p.version,r.vulnerable_versions))continue;t.reportInfo(e.MessageName.UNNAMED,`Found vulnerable ${e.structUtils.prettyLocator(o,p)} (via ${e.structUtils.prettyRange(o,a.range)})`);let u=(await n.getCandidates(a,new Map,{project:d,report:t,resolver:n}))[0];if(!u){t.reportError(e.MessageName.UNNAMED,`No patched candidates found for ${e.structUtils.prettyDescriptor(o,a)}`);continue}let m=await n.resolve(u,{project:d,report:t,resolver:n});if(!e.semverUtils.satisfiesWithPrereleases(m.version,r.patched_versions)){t.reportWarning(e.MessageName.UNNAMED,`No compatible patched version found for ${e.structUtils.prettyDescriptor(o,a)}`);continue}t.reportInfo(e.MessageName.UNNAMED,`Setting resolution for ${e.structUtils.prettyDescriptor(o,a)} to ${e.structUtils.prettyRange(o,m.version)}`),this.setResolution(s,a,m)}}setResolution(t,s,r){let{project:o}=t,n=e.structUtils.convertLocatorToDescriptor(r);o.storedDescriptors.set(s.descriptorHash,s),o.storedDescriptors.set(n.descriptorHash,n),o.resolutionAliases.set(s.descriptorHash,n.descriptorHash)}async initState(){let t=await e.Configuration.find(this.context.cwd,this.context.plugins),{project:s,workspace:r}=await e.Project.find(t,this.context.cwd),o=await e.Cache.find(t);if(!r)throw new v.WorkspaceRequiredError(s.cwd,this.context.cwd);await s.restoreInstallState();let n=t.makeResolver();return{configuration:t,workspace:r,cache:o,project:s,resolver:n}}async getAdvisories(){let t=new R.PassThrough,s=[];t.on("data",n=>{s.push(n)}),await this.cli.run(["npm","audit","-AR","--json"],{stdout:t}),t.end();let r=JSON.parse(Buffer.concat(s).toString());if(!P(r))throw new Error("Unexpected yarn npm audit result");let o=[];return Object.entries(r.advisories).forEach(([n,d])=>{o.push(d)}),o}};h.paths=[["npm","audit","fix"]];var U={commands:[h]},_=U;return I(j);})();
return plugin;
}
};
